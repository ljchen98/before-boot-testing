coreNum = 3
Memory_wr_size = 1024
outputPath = "./head.S"

# if __name__ == '__main__':
wBuff = []

wBuff.append("#include <platform.h>")
wBuff.append("#include <smp.h>")
wBuff.append("#include \"common.h\"")
wBuff.append("")
wBuff.append("  .section .text.init")
wBuff.append("  .option norvc")
wBuff.append("  .globl _prog_start")
wBuff.append("_prog_start:")
wBuff.append("  // initialize")

wBuff.append("  li s3, " + str(coreNum) +" // Core Num")
wBuff.append("  li sp, (PAYLOAD_DEST + 0xffff000)")
wBuff.append("  li s1, 0 // assume hartid 0 not pause")
wBuff.append("  smp_pause(s1, s2)")
wBuff.append("  call init_uart")
wBuff.append("  smp_resume(s1, s2)")
wBuff.append("  ")
wBuff.append("  li s4, 0  ")
wBuff.append("single_core:")
wBuff.append("  addi s1, s4, 0")
wBuff.append("  smp_pause(s1, s2)")
wBuff.append("  csrr a0, mhartid")
wBuff.append("  call singlecore_mem_wr_B2B")
wBuff.append("  csrr a0, mhartid")
wBuff.append("  call singlecore_mem_wr_nonB2B")
wBuff.append("  csrr a0, mhartid")
wBuff.append("  call singlecore_mem_Bit_wr_B2B")
wBuff.append("  csrr a0, mhartid")
wBuff.append("  call singlecore_mem_Bit_wr_nonB2B")
wBuff.append("  smp_resume(s1, s2)")
wBuff.append("  addi s4, s4, 1")
wBuff.append("  blt s4, s3, single_core")
wBuff.append("")
wBuff.append("  li s4, 0")
wBuff.append("multi_core:")
wBuff.append("  li s5, 0  ")
wBuff.append("multi_core_1:")
wBuff.append("  beq s4, s5, increase")
wBuff.append("  // hart s4 -- For notice and write")
wBuff.append("  addi s1, s4, 0")
wBuff.append("  smp_pause(s1, s2)")
wBuff.append("  addi a0, s4, 0")
wBuff.append("  addi a1, s5, 0")
wBuff.append("  call print_multi_core_info")
wBuff.append("  csrr a0, mhartid")
wBuff.append("  call multicore_mem_w")
wBuff.append("  smp_resume(s1, s2)")
wBuff.append("  // hart s5 -- For read and check")
wBuff.append("  addi s1, s5, 0")
wBuff.append("  smp_pause(s1, s2)")
wBuff.append("  csrr a0, mhartid")
wBuff.append("  call multicore_mem_r")
wBuff.append("  smp_resume(s1, s2)")
wBuff.append("increase:    ")
wBuff.append("  addi s5, s5, 1")
wBuff.append("  blt s5, s3, multi_core_1")
wBuff.append("  addi s4, s4, 1")
wBuff.append("  blt s4, s3, multi_core")
wBuff.append("")

wBuff.append("#############################")
wBuff.append("  li s1, 0")
wBuff.append("  smp_pause(s1, s2)")
wBuff.append("  li sp, (PAYLOAD_DEST + 0xffff000)")
wBuff.append("  call main")
wBuff.append("  smp_resume(s1, s2)")

wBuff.append("  csrr a0, mhartid // hartid for next level bootloader")
wBuff.append("  la a1, dtb // dtb address for next level bootloader")
wBuff.append("  li s1, PAYLOAD_DEST")
wBuff.append("  jr s1")

wBuff.append("  .section .dtb")
wBuff.append("  .align 3")
wBuff.append("dtb:")
wBuff.append("")

f = open(outputPath, 'w')
f.writelines([line + '\n' for line in wBuff])
f.close()

print("Successful Ouput in " + outputPath)




# wBuff.append("  li sp, (PAYLOAD_DEST + 0xffff000)")
# wBuff.append("  li s1, 0 // assume hartid 0 not pause")
# wBuff.append("  smp_pause(s1, s2)")
# wBuff.append("  call init_uart")
# wBuff.append("  smp_resume(s1, s2)")
# wBuff.append("")

# for i in range(coreNum):
#     wBuff.append("  // hartid " + str(i))
#     wBuff.append("  li s1, " + str(i))
#     wBuff.append("  smp_pause(s1, s2)")
#     wBuff.append("  csrr a0, mhartid")
#     wBuff.append("  call singlecore_mem_wr_B2B")
#     wBuff.append("  csrr a0, mhartid")
#     wBuff.append("  call singlecore_mem_wr_nonB2B")
#     wBuff.append("  csrr a0, mhartid")
#     wBuff.append("  call singlecore_mem_Bit_wr_B2B")
#     wBuff.append("  csrr a0, mhartid")
#     wBuff.append("  call singlecore_mem_Bit_wr_nonB2B")
#     wBuff.append("  smp_resume(s1, s2)")
#     wBuff.append("")


# for i in range(coreNum):
#     for j in range(coreNum):
#         if i==j:
#             continue
#         wBuff.append("  // hartid " + str(i) + " Write; hartid " + str(j) + " Read")
#         wBuff.append("  // For Notice")
#         wBuff.append("  li s1, 0 ")
#         wBuff.append("  smp_pause(s1, s2)")
#         wBuff.append("  li a0, 0")
#         wBuff.append("  li a1, 1")
#         wBuff.append("  call print_multi_core_info")
#         wBuff.append("  smp_resume(s1, s2)")
#         wBuff.append("  // hart " + str(i))
#         wBuff.append("  li s1, " + str(i))
#         wBuff.append("  smp_pause(s1, s2)")
#         wBuff.append("  csrr a0, mhartid")
#         wBuff.append("  call multicore_mem_w")
#         wBuff.append("  smp_resume(s1, s2)")
#         wBuff.append("  // hart " + str(j))
#         wBuff.append("  li s1, " + str(j))
#         wBuff.append("  smp_pause(s1, s2)")
#         wBuff.append("  csrr a0, mhartid")
#         wBuff.append("  call multicore_mem_r")
#         wBuff.append("  smp_resume(s1, s2)")
#         wBuff.append("")

# wBuff.append("#############################")
# wBuff.append("  li s1, 0")
# wBuff.append("  smp_pause(s1, s2)")
# wBuff.append("  li sp, (PAYLOAD_DEST + 0xffff000)")
# wBuff.append("  call main")
# wBuff.append("  smp_resume(s1, s2)")

# wBuff.append("  csrr a0, mhartid // hartid for next level bootloader")
# wBuff.append("  la a1, dtb // dtb address for next level bootloader")
# wBuff.append("  li s1, PAYLOAD_DEST")
# wBuff.append("  jr s1")

# wBuff.append("  .section .dtb")
# wBuff.append("  .align 3")
# wBuff.append("dtb:")
# wBuff.append("")

